// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace UdpMessages.ServerClientMessages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct InitGameMessageFix : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public InitGameMessageFix __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte PlayerNumber { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte TeamSize { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public byte NormalProjectileAmmo { get { return __p.bb.Get(__p.bb_pos + 2); } }
  public float NormalProjectileReloadTimeRemaining { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public byte BouncingProjectileAmmo { get { return __p.bb.Get(__p.bb_pos + 8); } }
  public float BouncingProjectileReloadTimeRemaining { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }
  public byte SpaceshipRespawnTime { get { return __p.bb.Get(__p.bb_pos + 16); } }
  public float SpaceshipMaxLifePoints { get { return __p.bb.GetFloat(__p.bb_pos + 20); } }
  public float SpaceshipRadius { get { return __p.bb.GetFloat(__p.bb_pos + 24); } }
  public float NormalProjectileRadius { get { return __p.bb.GetFloat(__p.bb_pos + 28); } }
  public float NormalProjectileSpeed { get { return __p.bb.GetFloat(__p.bb_pos + 32); } }
  public byte NormalProjectileClipSize { get { return __p.bb.Get(__p.bb_pos + 36); } }
  public float NormalProjectileReloadDelay { get { return __p.bb.GetFloat(__p.bb_pos + 40); } }
  public float NormalProjectileReloadSpeed { get { return __p.bb.GetFloat(__p.bb_pos + 44); } }
  public float BouncingProjectileRadius { get { return __p.bb.GetFloat(__p.bb_pos + 48); } }
  public float BouncingProjectileSpeed { get { return __p.bb.GetFloat(__p.bb_pos + 52); } }
  public byte BouncingProjectileClipSize { get { return __p.bb.Get(__p.bb_pos + 56); } }
  public float BouncingProjectileAutoReloadSpeed { get { return __p.bb.GetFloat(__p.bb_pos + 60); } }
  public float ControlPointRadius { get { return __p.bb.GetFloat(__p.bb_pos + 64); } }
  public float ControlPointCapturingLimit { get { return __p.bb.GetFloat(__p.bb_pos + 68); } }
  public float ControlPointCapturingSpeed { get { return __p.bb.GetFloat(__p.bb_pos + 72); } }
  public float ControlPointTimeBeforeCooldown { get { return __p.bb.GetFloat(__p.bb_pos + 76); } }
  public float ControlPointCooldownSpeed { get { return __p.bb.GetFloat(__p.bb_pos + 80); } }
  public float ControlProgressionGoal { get { return __p.bb.GetFloat(__p.bb_pos + 84); } }
  public float ControlProgressionSpeed { get { return __p.bb.GetFloat(__p.bb_pos + 88); } }
  public float ReinstallDuration { get { return __p.bb.GetFloat(__p.bb_pos + 92); } }
  public UdpMessages.ServerClientMessages.RespawnPoint TeamOneRespawnPoint { get { return (new UdpMessages.ServerClientMessages.RespawnPoint()).__assign(__p.bb_pos + 96, __p.bb); } }
  public UdpMessages.ServerClientMessages.RespawnPoint TeamTwoRespawnPoint { get { return (new UdpMessages.ServerClientMessages.RespawnPoint()).__assign(__p.bb_pos + 112, __p.bb); } }
  public float TeamOneControlProgression { get { return __p.bb.GetFloat(__p.bb_pos + 128); } }
  public float TeamTwoControlProgression { get { return __p.bb.GetFloat(__p.bb_pos + 132); } }
  public float TeamOneReinstallRemaining { get { return __p.bb.GetFloat(__p.bb_pos + 136); } }
  public float TeamTwoReinstallRemaining { get { return __p.bb.GetFloat(__p.bb_pos + 140); } }
  public float TimeToDraw { get { return __p.bb.GetFloat(__p.bb_pos + 144); } }

  public static Offset<UdpMessages.ServerClientMessages.InitGameMessageFix> CreateInitGameMessageFix(FlatBufferBuilder builder, byte PlayerNumber, byte TeamSize, byte NormalProjectileAmmo, float NormalProjectileReloadTimeRemaining, byte BouncingProjectileAmmo, float BouncingProjectileReloadTimeRemaining, byte SpaceshipRespawnTime, float SpaceshipMaxLifePoints, float SpaceshipRadius, float NormalProjectileRadius, float NormalProjectileSpeed, byte NormalProjectileClipSize, float NormalProjectileReloadDelay, float NormalProjectileReloadSpeed, float BouncingProjectileRadius, float BouncingProjectileSpeed, byte BouncingProjectileClipSize, float BouncingProjectileAutoReloadSpeed, float ControlPointRadius, float ControlPointCapturingLimit, float ControlPointCapturingSpeed, float ControlPointTimeBeforeCooldown, float ControlPointCooldownSpeed, float ControlProgressionGoal, float ControlProgressionSpeed, float ReinstallDuration, float teamOneRespawnPoint_position_X, float teamOneRespawnPoint_position_Y, float teamOneRespawnPoint_Width, float teamOneRespawnPoint_Height, float teamTwoRespawnPoint_position_X, float teamTwoRespawnPoint_position_Y, float teamTwoRespawnPoint_Width, float teamTwoRespawnPoint_Height, float TeamOneControlProgression, float TeamTwoControlProgression, float TeamOneReinstallRemaining, float TeamTwoReinstallRemaining, float TimeToDraw) {
    builder.Prep(4, 148);
    builder.PutFloat(TimeToDraw);
    builder.PutFloat(TeamTwoReinstallRemaining);
    builder.PutFloat(TeamOneReinstallRemaining);
    builder.PutFloat(TeamTwoControlProgression);
    builder.PutFloat(TeamOneControlProgression);
    builder.Prep(4, 16);
    builder.PutFloat(teamTwoRespawnPoint_Height);
    builder.PutFloat(teamTwoRespawnPoint_Width);
    builder.Prep(4, 8);
    builder.PutFloat(teamTwoRespawnPoint_position_Y);
    builder.PutFloat(teamTwoRespawnPoint_position_X);
    builder.Prep(4, 16);
    builder.PutFloat(teamOneRespawnPoint_Height);
    builder.PutFloat(teamOneRespawnPoint_Width);
    builder.Prep(4, 8);
    builder.PutFloat(teamOneRespawnPoint_position_Y);
    builder.PutFloat(teamOneRespawnPoint_position_X);
    builder.PutFloat(ReinstallDuration);
    builder.PutFloat(ControlProgressionSpeed);
    builder.PutFloat(ControlProgressionGoal);
    builder.PutFloat(ControlPointCooldownSpeed);
    builder.PutFloat(ControlPointTimeBeforeCooldown);
    builder.PutFloat(ControlPointCapturingSpeed);
    builder.PutFloat(ControlPointCapturingLimit);
    builder.PutFloat(ControlPointRadius);
    builder.PutFloat(BouncingProjectileAutoReloadSpeed);
    builder.Pad(3);
    builder.PutByte(BouncingProjectileClipSize);
    builder.PutFloat(BouncingProjectileSpeed);
    builder.PutFloat(BouncingProjectileRadius);
    builder.PutFloat(NormalProjectileReloadSpeed);
    builder.PutFloat(NormalProjectileReloadDelay);
    builder.Pad(3);
    builder.PutByte(NormalProjectileClipSize);
    builder.PutFloat(NormalProjectileSpeed);
    builder.PutFloat(NormalProjectileRadius);
    builder.PutFloat(SpaceshipRadius);
    builder.PutFloat(SpaceshipMaxLifePoints);
    builder.Pad(3);
    builder.PutByte(SpaceshipRespawnTime);
    builder.PutFloat(BouncingProjectileReloadTimeRemaining);
    builder.Pad(3);
    builder.PutByte(BouncingProjectileAmmo);
    builder.PutFloat(NormalProjectileReloadTimeRemaining);
    builder.Pad(1);
    builder.PutByte(NormalProjectileAmmo);
    builder.PutByte(TeamSize);
    builder.PutByte(PlayerNumber);
    return new Offset<UdpMessages.ServerClientMessages.InitGameMessageFix>(builder.Offset);
  }
};


}
