// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace UdpMessages.ServerClientMessages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct InitGameMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static InitGameMessage GetRootAsInitGameMessage(ByteBuffer _bb) { return GetRootAsInitGameMessage(_bb, new InitGameMessage()); }
  public static InitGameMessage GetRootAsInitGameMessage(ByteBuffer _bb, InitGameMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InitGameMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public UdpMessages.ServerClientMessages.InitGameMessageFix? Fix { get { int o = __p.__offset(4); return o != 0 ? (UdpMessages.ServerClientMessages.InitGameMessageFix?)(new UdpMessages.ServerClientMessages.InitGameMessageFix()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public UdpMessages.ServerClientMessages.Spaceship? Spaceships(int j) { int o = __p.__offset(6); return o != 0 ? (UdpMessages.ServerClientMessages.Spaceship?)(new UdpMessages.ServerClientMessages.Spaceship()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SpaceshipsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public UdpMessages.ServerClientMessages.Obstacle? Obstacles(int j) { int o = __p.__offset(8); return o != 0 ? (UdpMessages.ServerClientMessages.Obstacle?)(new UdpMessages.ServerClientMessages.Obstacle()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObstaclesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public UdpMessages.ServerClientMessages.Projectile? Projectiles(int j) { int o = __p.__offset(10); return o != 0 ? (UdpMessages.ServerClientMessages.Projectile?)(new UdpMessages.ServerClientMessages.Projectile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ProjectilesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public UdpMessages.ServerClientMessages.ControlPointState? ControlPointStates(int j) { int o = __p.__offset(12); return o != 0 ? (UdpMessages.ServerClientMessages.ControlPointState?)(new UdpMessages.ServerClientMessages.ControlPointState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ControlPointStatesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartInitGameMessage(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFix(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.InitGameMessageFix> fixOffset) { builder.AddStruct(0, fixOffset.Value, 0); }
  public static void AddSpaceships(FlatBufferBuilder builder, VectorOffset spaceshipsOffset) { builder.AddOffset(1, spaceshipsOffset.Value, 0); }
  public static VectorOffset CreateSpaceshipsVector(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.Spaceship>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpaceshipsVectorBlock(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.Spaceship>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSpaceshipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObstacles(FlatBufferBuilder builder, VectorOffset obstaclesOffset) { builder.AddOffset(2, obstaclesOffset.Value, 0); }
  public static VectorOffset CreateObstaclesVector(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.Obstacle>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObstaclesVectorBlock(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.Obstacle>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObstaclesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProjectiles(FlatBufferBuilder builder, VectorOffset projectilesOffset) { builder.AddOffset(3, projectilesOffset.Value, 0); }
  public static VectorOffset CreateProjectilesVector(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.Projectile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateProjectilesVectorBlock(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.Projectile>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartProjectilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddControlPointStates(FlatBufferBuilder builder, VectorOffset controlPointStatesOffset) { builder.AddOffset(4, controlPointStatesOffset.Value, 0); }
  public static VectorOffset CreateControlPointStatesVector(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.ControlPointState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateControlPointStatesVectorBlock(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.ControlPointState>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartControlPointStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<UdpMessages.ServerClientMessages.InitGameMessage> EndInitGameMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // fix
    builder.Required(o, 6);  // spaceships
    builder.Required(o, 8);  // obstacles
    builder.Required(o, 10);  // projectiles
    builder.Required(o, 12);  // controlPointStates
    return new Offset<UdpMessages.ServerClientMessages.InitGameMessage>(o);
  }
};


}
