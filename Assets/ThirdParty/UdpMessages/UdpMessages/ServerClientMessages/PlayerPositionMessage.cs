// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace UdpMessages.ServerClientMessages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PlayerPositionMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlayerPositionMessage GetRootAsPlayerPositionMessage(ByteBuffer _bb) { return GetRootAsPlayerPositionMessage(_bb, new PlayerPositionMessage()); }
  public static PlayerPositionMessage GetRootAsPlayerPositionMessage(ByteBuffer _bb, PlayerPositionMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerPositionMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public UdpMessages.ServerClientMessages.PlayerPositionData? Data(int j) { int o = __p.__offset(4); return o != 0 ? (UdpMessages.ServerClientMessages.PlayerPositionData?)(new UdpMessages.ServerClientMessages.PlayerPositionData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public byte TickCounter { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<UdpMessages.ServerClientMessages.PlayerPositionMessage> CreatePlayerPositionMessage(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset),
      byte tickCounter = 0) {
    builder.StartTable(2);
    PlayerPositionMessage.AddData(builder, dataOffset);
    PlayerPositionMessage.AddTickCounter(builder, tickCounter);
    return PlayerPositionMessage.EndPlayerPositionMessage(builder);
  }

  public static void StartPlayerPositionMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddTickCounter(FlatBufferBuilder builder, byte tickCounter) { builder.AddByte(1, tickCounter, 0); }
  public static Offset<UdpMessages.ServerClientMessages.PlayerPositionMessage> EndPlayerPositionMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // data
    return new Offset<UdpMessages.ServerClientMessages.PlayerPositionMessage>(o);
  }
};


}
