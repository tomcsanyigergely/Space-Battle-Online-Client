// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace UdpMessages.ServerClientMessages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MatchInitializedMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MatchInitializedMessage GetRootAsMatchInitializedMessage(ByteBuffer _bb) { return GetRootAsMatchInitializedMessage(_bb, new MatchInitializedMessage()); }
  public static MatchInitializedMessage GetRootAsMatchInitializedMessage(ByteBuffer _bb, MatchInitializedMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MatchInitializedMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ClientToken { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte PlayerNumber { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public string TeamOnePlayers(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TeamOnePlayersLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TeamTwoPlayers(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TeamTwoPlayersLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<UdpMessages.ServerClientMessages.MatchInitializedMessage> CreateMatchInitializedMessage(FlatBufferBuilder builder,
      ulong clientToken = 0,
      byte playerNumber = 0,
      VectorOffset teamOnePlayersOffset = default(VectorOffset),
      VectorOffset teamTwoPlayersOffset = default(VectorOffset)) {
    builder.StartTable(4);
    MatchInitializedMessage.AddClientToken(builder, clientToken);
    MatchInitializedMessage.AddTeamTwoPlayers(builder, teamTwoPlayersOffset);
    MatchInitializedMessage.AddTeamOnePlayers(builder, teamOnePlayersOffset);
    MatchInitializedMessage.AddPlayerNumber(builder, playerNumber);
    return MatchInitializedMessage.EndMatchInitializedMessage(builder);
  }

  public static void StartMatchInitializedMessage(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddClientToken(FlatBufferBuilder builder, ulong clientToken) { builder.AddUlong(0, clientToken, 0); }
  public static void AddPlayerNumber(FlatBufferBuilder builder, byte playerNumber) { builder.AddByte(1, playerNumber, 0); }
  public static void AddTeamOnePlayers(FlatBufferBuilder builder, VectorOffset teamOnePlayersOffset) { builder.AddOffset(2, teamOnePlayersOffset.Value, 0); }
  public static VectorOffset CreateTeamOnePlayersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTeamOnePlayersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTeamOnePlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTeamTwoPlayers(FlatBufferBuilder builder, VectorOffset teamTwoPlayersOffset) { builder.AddOffset(3, teamTwoPlayersOffset.Value, 0); }
  public static VectorOffset CreateTeamTwoPlayersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTeamTwoPlayersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTeamTwoPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<UdpMessages.ServerClientMessages.MatchInitializedMessage> EndMatchInitializedMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // teamOnePlayers
    builder.Required(o, 10);  // teamTwoPlayers
    return new Offset<UdpMessages.ServerClientMessages.MatchInitializedMessage>(o);
  }
};


}
