// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace UdpMessages.ServerClientMessages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Obstacle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Obstacle GetRootAsObstacle(ByteBuffer _bb) { return GetRootAsObstacle(_bb, new Obstacle()); }
  public static Obstacle GetRootAsObstacle(ByteBuffer _bb, Obstacle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Obstacle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public UdpMessages.ServerClientMessages.Position? Position { get { int o = __p.__offset(4); return o != 0 ? (UdpMessages.ServerClientMessages.Position?)(new UdpMessages.ServerClientMessages.Position()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public UdpMessages.ServerClientMessages.Position? Collider(int j) { int o = __p.__offset(6); return o != 0 ? (UdpMessages.ServerClientMessages.Position?)(new UdpMessages.ServerClientMessages.Position()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ColliderLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartObstacle(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<UdpMessages.ServerClientMessages.Position> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddCollider(FlatBufferBuilder builder, VectorOffset colliderOffset) { builder.AddOffset(1, colliderOffset.Value, 0); }
  public static void StartColliderVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<UdpMessages.ServerClientMessages.Obstacle> EndObstacle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // position
    builder.Required(o, 6);  // collider
    return new Offset<UdpMessages.ServerClientMessages.Obstacle>(o);
  }
};


}
